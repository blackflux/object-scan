workflows:
  version: 2
  node-multi-build:
    jobs:
      - gally-create-pr
      - test-node-v12:
          requires:
            - gally-create-pr
      - test-node-v10:
          requires:
            - gally-create-pr
      - gally-auto-merge:
          requires:
            - gally-create-pr
            - test-node-v12
            - test-node-v10
          filters:
            branches:
              only: /dependabot\/.*/
      - release:
          requires:
            - gally-create-pr
            - test-node-v12
            - test-node-v10
          filters:
            branches:
              only: master
version: 2
jobs:
  gally-create-pr:
    docker:
      - image: 'circleci/node:12'
    steps:
      - checkout
      - run: sudo yarn global add gally
      - run: ga promote $CIRCLE_BRANCH
  gally-auto-merge:
    docker:
      - image: 'circleci/node:12'
    steps:
      - run:
          name: Set PR number
          command: >
            echo 'export
            CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"'
            >> $BASH_ENV

            source $BASH_ENV

            echo $CIRCLE_PR_NUMBER
      - checkout
      - run: sudo yarn global add gally
      - run: >-
          ga approve $CIRCLE_PR_NUMBER --condition
          "base.ref=dev&state=open&user.login=dependabot-preview[bot]&mergeable=true"
      - run: >-
          ga merge $CIRCLE_PR_NUMBER --condition
          "base.ref=dev&state=open&user.login=dependabot-preview[bot]&mergeable=true"
  test-node-v10:
    docker:
      - image: 'circleci/node:10'
    steps:
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 'yarn-packages-{{ checksum "yarn.lock" }}'
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 'yarn-packages-{{ checksum "yarn.lock" }}'
          paths:
            - ~/.cache/yarn
      - run: yarn test
      - run: >-
          (git add . && git diff-index --quiet HEAD --) || (git status && exit
          1);
  release:
    docker:
      - image: 'circleci/node:12'
    steps:
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 'yarn-packages-{{ checksum "yarn.lock" }}'
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 'yarn-packages-{{ checksum "yarn.lock" }}'
          paths:
            - ~/.cache/yarn
      - run: yarn run semantic-release
  test-node-v12:
    docker:
      - image: 'circleci/node:12'
    steps:
      - checkout
      - run:
          command: |
            # sync submodules as checkout doesn't do this automatically
            if [[ $(git config --file .gitmodules --get-regexp path) ]]; then
              git submodule sync && git submodule update --init
            fi
      - run:
          command: |
            if [[ -n "${NPM_TOKEN}" ]]; then
              echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            fi
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - 'yarn-packages-{{ checksum "yarn.lock" }}'
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: 'yarn-packages-{{ checksum "yarn.lock" }}'
          paths:
            - ~/.cache/yarn
      - run: yarn test
      - run: >-
          (git add . && git diff-index --quiet HEAD --) || (git status && exit
          1);
      - run:
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              yarn run coveralls
            fi
